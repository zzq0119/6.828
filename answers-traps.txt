Q: Which registers contain arguments to functions? For example, which register holds 13 in main's call to printf?
A: "The RISC-V calling convention passes arguments in registers when possible. Up to eight integer
registers, a0—a7, and up to eight floating-point registers, fa0—fa7, are used for this purpose."
`a2` holds 13 in main's call to printf. 

Q: Where is the call to function f in the assembly code for main? Where is the call to g? (Hint: the compiler may inline functions.)
A: at line 46 in call.asm, inlined.

Q: At what address is the function printf located?
A: 0x630

Q: What value is in the register ra just after the jalr to printf in main?
A: jalr add 4 to the old value of pc and write into x1 i.e. ra, so ra = 0x34+4 = 0x38

Q: Run the following code.
```
	unsigned int i = 0x00646c72;
	printf("H%x Wo%s", 57616, &i);
```
What is the output? Here's an ASCII table that maps bytes to characters.
The output depends on that fact that the RISC-V is little-endian. If the RISC-V were instead big-endian what would you set i to in order to yield the same output? Would you need to change 57616 to a different value?
A: 57616==0xe110, 'd'==0x64, 'l'==0x6c, 'r'==0x72, so the output is "He110 World". If the RISC-V were big-endian, i should be 0x726c6400, 57616 need not be changed.


Q: In the following code, what is going to be printed after 'y='? (note: the answer is not a specific value.) Why does this happen?
```
	printf("x=%d y=%d", 3);
```
A: It depends on value of a2.

